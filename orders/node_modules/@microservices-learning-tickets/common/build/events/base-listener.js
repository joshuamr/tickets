"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = void 0;
var Listener = /** @class */ (function () {
    function Listener(client) {
        this.client = client;
        this.ackWait = 5000;
    }
    Listener.prototype.subscriptionOptions = function () {
        return (this.client
            .subscriptionOptions()
            // sets so that we get all messages ever created delivered
            // need durable name (next) and queue group to all work together
            .setDeliverAllAvailable()
            // this option makes it so that you have to acknowledge you received
            // the event.  That way, you do not lose information on the events
            // you have processed.
            .setManualAckMode(true)
            // sets the time nats will continue to reach our service
            .setAckWait(this.ackWait)
            // sets so that nats keeps track of events already processed,
            // so they are not duplicated
            // to work correctly, you need the queue group in the subscription (so
            // it's not relying on just one service.)
            .setDurableName(this.queueGroupName));
    };
    Listener.prototype.listen = function () {
        var _this = this;
        var subscription = this.client.subscribe(this.subject, this.queueGroupName, this.subscriptionOptions());
        subscription.on('message', function (msg) {
            console.log("Message received: ".concat(_this.subject, " / ").concat(_this.queueGroupName));
            var parsedData = _this.parseMessage(msg);
            _this.onMessage(parsedData, msg);
        });
    };
    Listener.prototype.parseMessage = function (msg) {
        var data = msg.getData();
        return typeof data === 'string'
            ? JSON.parse(data)
            : JSON.parse(data.toString('utf8'));
    };
    return Listener;
}());
exports.Listener = Listener;
